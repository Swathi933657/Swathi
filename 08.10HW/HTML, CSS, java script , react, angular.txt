Overview: Frontend vs Backend
When building a web application, there are two main parts:
Part	                Runs On	                                                 Main Role
Frontend	     Userâ€™s Browser	                                  What the user sees (website design, buttons, forms)
Backend	Server          (Python, Node.js, etc.)	                          Logic, database, authentication, APIs

âœ… HTML, CSS, JavaScript, React, Angular â†’ Frontend
âœ… Python (Flask, Django, FastAPI) â†’ Backend

1.HTML (HyperText Markup Language):
ðŸ”¹ Meaning:
HTML is the structure of a web page.
It defines elements like headings, paragraphs, links, forms, etc.

Python doesnâ€™t replace HTML â€” it generates HTML pages.

2.CSS (Cascading Style Sheets):
ðŸ”¹ Meaning:
CSS controls the design and layout of a webpage â€” colors, fonts, spacing, and positioning.
Python doesnâ€™t write CSS â€” but your Flask/Django app serves CSS files to the browser.

3.JavaScript (JS):
ðŸ”¹ Meaning:
JavaScript adds interactivity to web pages â€” buttons, pop-ups, forms, animations, etc.
JS calls Python backend â†’ Python sends data back.

4.React (JavaScript Framework):
ðŸ”¹ Meaning:
React.js is a JavaScript library (by Facebook) for building dynamic, single-page web apps.
It uses components to render UI quickly without reloading pages.
React = Frontend
Python (Flask/Django/FastAPI) = Backend API
They communicate using REST APIs or JSON.

5.Angular (JavaScript Framework):
ðŸ”¹ Meaning:
Angular (by Google) is another JavaScript framework for building large, structured web apps.
Like React, it can connect to a Python backend for data.
ðŸ”¹ In Python:
Angular sends requests to Python API â†’ Python sends back data.
Example:
Angular app calls: GET /api/products
Python Flask/Django sends: JSON response of products.

They All Work Together:

| Layer                 | Technology                      | Example Task                  |
| --------------------- | ------------------------------- | ----------------------------- |
| **Frontend (Client)** | HTML                            | Structure of page             |
|                       | CSS                             | Styling and layout            |
|                       | JavaScript / React / Angular    | Interactivity and UI logic    |
| **Backend (Server)**  | Python (Flask, Django, FastAPI) | Handles logic, database, APIs |
| **Database**          | MySQL, PostgreSQL, MongoDB      | Stores user data              |



Full Web Flow Example:
User opens React/Angular webpage â†’ browser sends request
JavaScript calls Python API (using fetch() or axios)
Python (Flask/Django) receives the request, queries the database
Python returns data as JSON
React or Angular displays it dynamically on the page.

| Technology     | Type                 | Role                  | Works with Python?      |
| -------------- | -------------------- | --------------------- | ----------------------- |
| **HTML**       | Markup language      | Structure of page     | âœ… Yes                   |
| **CSS**        | Styling language     | Design and layout     | âœ… Yes                   |
| **JavaScript** | Programming language | Interactivity         | âœ… Yes (frontend)        |
| **React**      | JS library           | Dynamic frontend UI   | âœ… Yes (connect via API) |
| **Angular**    | JS framework         | Large-scale web apps  | âœ… Yes (connect via API) |
| **Python**     | Backend language     | Logic, APIs, database | âœ… Core backend          |

